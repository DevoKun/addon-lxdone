#!/usr/bin/python

# -------------------------------------------------------------------------- #
# Copyright 2016-2017                                                        #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

import lxd_common as lc
client = lc.Client()

DOMAIN = lc.sys.argv[1]
# DISK_SOURCE = lc.sys.argv[3]
# CONTEXT_DISK_ID = DISK_SOURCE.split('.')[-1]
# VM_ID = DISK_SOURCE.split('/')[-2]
# DS_ID = DISK_SOURCE.split('/')[-3]
# TARGET_DEVICE = 'CONTEXT'

container = client.containers.get(DOMAIN)

# context_disk = lc.storage_sysmap(CONTEXT_DISK_ID, 'FILE', DISK_SOURCE, VM_ID, DS_ID, None)
# context_disk = {'CONTEXT': {'path': context_disk, 'type': 'unix-block'}}
# container.devices.update(context_disk)
# container.save()
try:
    DISK_SOURCE = lc.sys.argv[3]
    CONTEXT_DISK_ID = DISK_SOURCE.split('.')[-1]
    VM_ID = DISK_SOURCE.split('/')[-2]
    DS_ID = DISK_SOURCE.split('/')[-3]
    # container.config['user.context']
    lc.storage_context_map(container, CONTEXT_DISK_ID, DISK_SOURCE, DS_ID, VM_ID)
except:
    pass

exit()
