#!/usr/bin/python

# -------------------------------------------------------------------------- #
# Copyright 2016-2017                                                        #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

import lxd_common as lc
t0 = lc.time()
from lxd_common import xml_getvalue as xq
from lxd_common import xml_getvalue_plus as xqp
client = lc.client

# READ_XML
xml = lc.sys.argv[1]
dicc = lc.xml_start(xml)
VM_ID = dicc["/VM/ID"][0]
lc.log_info(70 * "-", VM_ID)

# INITIALIZE_CONTAINER
try:
    container = client.containers.create({'name': 'one-' + VM_ID, 'source': {'type': 'none'}}, wait=True)
except:
    container = client.containers.get('one-' + VM_ID)

# GENERAL_CONFIG
MEMORY = lc.map_ram(xqp('MEMORY', dicc))
CPU = lc.map_cpu(xqp('CPU', dicc))  # cpu percentag, dicce
VCPU = lc.map_vcpu(xqp('VCPU', dicc))  # cpu core, diccs
xml = lc.map_xml(xml)

# STORAGE_CONFIG
DS_ID = dicc["/VM/HISTORY_RECORDS/HISTORY/DS_ID"][0]
DISK_TYPE = xq('DISK/TYPE', dicc)
DISK_CLONE = xq('DISK/CLONE', dicc)
DISK_SOURCE = xq('DISK/SOURCE', dicc)

# rootfs
root_source = lc.storage_rootfs_mount(VM_ID, DISK_TYPE[0], DS_ID, DISK_SOURCE[0], DISK_CLONE[0])

# extra
num_hdds = len(DISK_TYPE)
if num_hdds > 1:
    DISK_ID = xq('DISK/DISK_ID', dicc)
    DISK_TARGET = xq('DISK/TARGET', dicc)
    for x in xrange(1, num_hdds):
        disk = lc.storage_extra_map(VM_ID, DS_ID, DISK_ID[x], DISK_TYPE[x], DISK_SOURCE[x], DISK_CLONE[x], DISK_TARGET[x])
        container.devices.update(disk)

CONTEXT_DISK_ID = xqp('CONTEXT/DISK_ID', dicc)
if CONTEXT_DISK_ID:
    context_disk = lc.storage_pre(CONTEXT_DISK_ID, 'FILE', DISK_SOURCE, VM_ID, DS_ID, None)
    context_disk = {'CONTEXT': {'path': context_disk, 'type': 'unix-block'}}
    container.devices.update(context_disk)

# NETWORK_CONFIG
NIC = xq('NIC/NIC_ID', dicc)
if NIC[0]:
    NIC_BRIDGE = xq('NIC/BRIDGE', dicc)
    NIC_IP = xq('NIC/IP', dicc)
    NIC_MAC = xq('NIC/MAC', dicc)
    NIC_TARGET = xq('NIC/TARGET', dicc)
    for iface in NIC:
        i = int(iface)
        name = 'eth%s' % (iface)
        vm_nic = lc.map_nic(name, NIC_BRIDGE[i], NIC_MAC[i], NIC_TARGET[i])
        container.devices.update(vm_nic)
        lc.log_info(vm_nic, VM_ID)
        container.save()

# SAVE_CONFIG
# general
container.config.update({'security.privileged': 'true', 'raw.apparmor': 'mount fstype=iso9660,'})
for x in MEMORY, CPU, VCPU, xml, root_source:
    container.config.update(x)
container.save()

# BOOT_CONTAINER
try:
    lc.log_info(container.config, VM_ID)
    lc.sp.call('lxc start one-' + VM_ID, shell=True)  # starting container with pylxd breaks configuration
    lc.log_info(container.config, VM_ID)
    container.config['user.xml']  # validate config
except Exception as e:
    if container.status == 'Running':
        container.stop(wait=True)
    if num_hdds > 1:
        for x in xrange(1, num_hdds):
            source = lc.unmap(container.devices, DISK_TARGET[x])
            source = lc.storage_lazer(source)
            lc.storage_sysunmap(DISK_TYPE[x], source)
    if CONTEXT_DISK_ID:
        source = lc.unmap(container.devices, 'CONTEXT')
        lc.storage_sysunmap('FILE', source)
    lc.storage_rootfs_umount(DISK_TYPE[0], root_source['user.rootfs'])
    container.delete()
    lc.log_info(e, VM_ID)
    lc.sys.exit(1)

# START_VNC_SERVER
VNC_PORT = xqp('GRAPHICS/PORT', dicc)
if VNC_PORT:
    VNC_PASSWD = xqp('GRAPHICS/PASSWD', dicc)
    try:
        lc.vnc_start(VNC_PORT, VM_ID, VNC_PASSWD)
    except Exception as e:
        lc.log_info(e, VM_ID)

lc.clock(VM_ID, t0)
